//#include <iostream>
//using namespace std;
////C++에서는 다양한 오버로딩 기법이 존재함.
////오버로딩 : 같은 이름의 다른 기능
//
////1. 함수 오버로딩 : 함수의 이름이 같지만, 매개변수의 순서, 개수, 타입이 다른 경우 다른 함수로 취급한다. c언어와 다르게 같은 함수 다른 기능을 가진 함수 설계가 가능하다.
////(source 06)참고
//
////2. 생성자 오버로딩 : 클래스 내의 생성자의 매개변수의 순서, 개수, 타입이 다를 경우 다른 생성자로 취급한다.
////매개 변수가 없는 생성자(기본 생성자)가 없을 경우 클래스를 선언할 수 없습니다.
////생성자가 수정되었을 경우 기본 생성자가 없을 경우, 클래스 생성 시 반드시 생성자가 요구하는 매개변수에 맞는 데이터를 넣어줘야 한다.(MonsterStatus.h 예제 확인)
//
////Operation Overloading (연산자 오버로딩)
////클래스 내부에 있는 연산자를 대상으로 연산자 오버로딩을 작업할 경우, 객체 간의 연산을 작업할 수 있게 도와준다.
//
////연산자(Operator)의 종류
////1항 연산자 : 연산을 진행할 때 필요한 값, 식이 1개인 연산 (++, --)
//
////2항 연산자 : 연산을 진행할 때 필요한 값, 식이 2개인 연산 (+, -, *, /, %, .....)
//
////3항 연산자 : 값 = 조건식 ? 참 : 거짓
//
////오버로딩 작업 시에는 주로 1항과 2항에 대한 작업이 주로 이루어진다.
//
////연산자 오버로딩의 구현 방식
////1. 사용하는 키워드 operator
////2. 클래스의 멤버 함수를 연산자 오버로딩하는 방법
////3. 전역 함수를 연산자 오로딩 하는 방법(friend)
//
////예시를 통해 알아보는 연산자 오버로딩
//
//class Count
//{
//	int value; //클래스에서 접근 제한자를 따로 적지 않을 경우에 private 취급
//	//구조체의 경우는 접근 제한자를 따로 적지 않으면 public 취급한다.(C++)
//public:
//	//생성할 경우 value의 값이 10으로 생성된다.
//	Count() : value(10) {}
//
//	//수정하고자 하는 연산자에 대해 작성한다.
//	//--의 원래 기능은 값을 대상으로 1 감소시키는 기능
//	//void operator --() //전위 연산(값에 대해서 먼저 1을 감소하고, 연산을 진행하는 방식) (ex: a= 10, b= 5 --a+b => a=9가 되어 답 14)
//	//{
//	//	value--;
//	//}
//
//	//void operator --(int) //후위 연산(연산을 먼저하고 값에 대해서 1을 감소하는 방식)  (ex: a-- +b=> 15, a=9)
//	//{
//	//	--value;
//	//}
//	int GetValue() { return value; }
//
//	Count operator --()
//	{
//		//1. 연산에 대한 작업을 진행
//		value--;
//		//2. 현재의 값을 내보낸다.(*this -> Count)
//		return *this;
//		//value를 1빼고 난 다음, 그 수치만큼의 Count 객체를 return 한다
//		//this는 클래스 자기 자신을 의미함.(클래스는 참조 타입(주소))
//		//* 는 주소에 대한 값을 반환하는 연산자이다.
//	}
//	Count operator --(int)
//	{
//		//1. 연산을 진행하기 전 자신의 값을 따로 임시로 저장한다.(temp)
//		Count temp = *this;
//		//2. 연산에 대한 작업을 진행한다.
//		value--;
//		//3. 값만 이전 값으로 내보낸다.
//		return temp;
//	}
//};
//
//int main()
//{
//	Count c;
//	cout << c.GetValue() << endl;
//	c--;
//	cout << c.GetValue() << endl;
//	--c;
//	cout << c.GetValue() << endl;
//
//	Count c2;
//	c2 = c--; 
//	cout << c2.GetValue() << endl;
//	cout << c.GetValue() << endl;
//	//c에 대해서 계산은 할 수 있으나 객체로 대입하는 작업은 불가능
//	//따라서 이렇게 작업하고 싶을 경우네는 다른 형태로 작업을 진행해야 한다.
//	return 0;
//}


