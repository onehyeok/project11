#include <iostream>
using namespace std;

//예외(Exception) : 프로그램을 실행하다보면 개발자가 구현한 롲기에서 발생한 실수, 사용자의 입력등으로 인해
//발생할 수 있는 프로그램 종료 상황으로 개발자가 예측하고 방지가 가능하며, 코드를 통한 우회가 가능하다.
//(프로그램 자체에서 처리할 수단이 존재한다. : Handle(핸들))


//오류 (Error) : 프로그램을 실행하다보면 특정 원인으로 인해 비 정상적인 동작을 일으켜 프로그램이 종료되는 상황
//오류는 프로그램 자체에서 처리할 수단이 없는 것들을 의미


//컴파일 과정에서 발생하는 컴파일 오류(compile error)
//소스 코드 자체의 문법적 오류로 인해 발생하는 현상(클래스를 프로그램 내에서 찾을 수 없음, 잘못된 접근 상황, 함수를 
//프로그램 내에서 찾을 수 없음..)
//※컴파일(compile) : 프로그래밍 언어로 작성한 코드를 프로그램이 바이트 코드로 번역하는 과정

//실행 중에서 발생하는 런타임 오류(runtime error)

int main()
{
	int a, b;

	cout << "두개의 정수를 순서대로 입력하세요.";
	cin >> a >> b;

	//(BEST) if문을 활용해 그 상황 자체가 발생하지 않도록 설계한다.
	//if (b == 0)
	//{
	//	cout << "0으로 나눌 수 없습니다." << endl;
	//}
	//
	//else
	//{
	//	cout << a << "를 " << b << "로 나눈 몫은 " << a / b << "입니다." << endl;
	//}
	//
	try
	{
		if (b == 0) throw b; //캐치볼을 상상하면 쉬움. 평소에는 이렇게 하는데
		cout << a << "를 " << b << "로 나눈 몫은 " << a / b << "입니다." << endl;
	}
	catch (int exception) //던진 b(0인값인)가 돌아왔으니 이 명령을 실행해
	{
		cout << "0으로 나눌 수 없습니다." << endl;
	}
	
	//예외처리문 try- catch는 try{}로 예외가 발생할 수 있는 문법을 감싸주고 오류가 발생할 경우 그 값을 throw를 통해 던진다
	//throw를 통해 던지면 그 다음 명령들은 전부 처리되지 않고 catch 영역의 작업이 실행된다.
	//실질적인 해결이 아닌 그 상황에 대한 수습 정도로 사용되는 기능으로 if문처럼 아예 그 상황이 생기지 않도록 설계해주는 것이 더 바람직하나 
	//외부 코드 연동 등 코드로 해결하기 어려운 부분이나 직관적으로 이 상황이 잘못됐음을 표현하고자 할 때는 매우 효과적이다.

	return 0;
}